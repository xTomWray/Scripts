import os
import pandas as pd
from openpyxl import load_workbook

def read_large_pivot(file_directory: str,
                     file_name: str,
                     sheet_name: str,
                     chunk_size: int = 1000,
                     program_filter: str = None,
                     new_ps_filter: str = None,
                     activity_filter: str = None) -> pd.DataFrame:
    """Reads a large pivot table's cached data from an Excel sheet and filters rows by specified criteria.

    This function opens an Excel file in read-only and data-only mode and reads the specified sheet,
    which contains the pivot table's cached view. It assumes that the first non-empty row in the sheet
    contains header values. The rows are processed in chunks for efficiency. After loading, optional
    filters for 'Program', 'New PS', and 'Activity' are applied to return only the matching rows.

    Args:
        file_directory (str): The path to the directory containing the Excel file. Use an empty string if the file is local.
        file_name (str): The name of the Excel file.
        sheet_name (str): The name of the sheet that contains the pivot table data.
        chunk_size (int): The number of rows to read per chunk. Defaults to 1000.
        program_filter (str, optional): Value to filter the 'Program' column. Defaults to None.
        new_ps_filter (str, optional): Value to filter the 'New PS' column. Defaults to None.
        activity_filter (str, optional): Value to filter the 'Activity' column. Defaults to None.

    Returns:
        pd.DataFrame: A DataFrame containing the filtered pivot table data. If an error occurs or no data is found, returns an empty DataFrame.
    """
    # Construct the full file path.
    full_path = os.path.join(file_directory, file_name) if file_directory else file_name
    print(f"Opening file: {full_path}")

    # Load the workbook in read-only and data-only mode.
    wb = load_workbook(full_path, read_only=True, data_only=True)

    # Ensure the target sheet exists.
    if sheet_name not in wb.sheetnames:
        print(f"Error: Sheet '{sheet_name}' not found in the Excel file.")
        return pd.DataFrame()

    ws = wb[sheet_name]

    # Create an iterator for rows (values_only=True returns cell values).
    rows_iter = ws.iter_rows(values_only=True)

    # Find the first non-empty row to use as header.
    header = None
    for row in rows_iter:
        if any(cell is not None for cell in row):
            header = list(row)
            break

    if header is None:
        print("Error: No header row found in the sheet.")
        return pd.DataFrame()

    # Process rows in chunks for efficiency.
    data_chunks = []
    current_chunk = []
    row_count = 0
    for row in rows_iter:
        # Skip completely empty rows.
        if not any(cell is not None for cell in row):
            continue
        current_chunk.append(row)
        row_count += 1
        if row_count % chunk_size == 0:
            data_chunks.append(pd.DataFrame(current_chunk, columns=header))
            current_chunk = []

    # Add any remaining rows as a final chunk.
    if current_chunk:
        data_chunks.append(pd.DataFrame(current_chunk, columns=header))

    # Concatenate all chunks into a single DataFrame.
    df = pd.concat(data_chunks, ignore_index=True) if data_chunks else pd.DataFrame(columns=header)
    print(f"Finished reading. Total rows read (excluding header): {row_count}")

    # Apply filters if specified.
    if program_filter is not None:
        if "Program" in df.columns:
            df = df[df["Program"] == program_filter]
        else:
            print("Warning: 'Program' column not found in the data.")
    if new_ps_filter is not None:
        if "New PS" in df.columns:
            df = df[df["New PS"] == new_ps_filter]
        else:
            print("Warning: 'New PS' column not found in the data.")
    if activity_filter is not None:
        if "Activity" in df.columns:
            df = df[df["Activity"] == activity_filter]
        else:
            print("Warning: 'Activity' column not found in the data.")

    return df


# Example usage:
if __name__ == "__main__":
    # Set file path and sheet name.
    file_directory = r"C:\Users\U155771\OneDrive - L3Harris Technologies Inc\Code\Python\CAM Script"
    file_name = r"labor.xlsm"
    sheet_name = "Labor Pivot by Activity"
    
    # Define filters for 'Program', 'New PS', and 'Activity'.
    program_filter = "Some Program"    # Replace with desired value.
    new_ps_filter = "Some New PS"        # Replace with desired value.
    activity_filter = "Some Activity"    # Replace with desired value.

    # Read and filter the pivot table data.
    df_pivot_filtered = read_large_pivot(
        file_directory,
        file_name,
        sheet_name,
        chunk_size=1000,
        program_filter=program_filter,
        new_ps_filter=new_ps_filter,
        activity_filter=activity_filter
    )

    # Print the first few rows of the filtered data for verification.
    print(df_pivot_filtered.head())
